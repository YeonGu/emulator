///////////////////////////////////////////////////////////////////////
//          TiNES FC/NES Emulator
//          Southeast University.
//  Created by Gu Yuhang on 2023/8/29
//
//  ppu-palette.c
//
///////////////////////////////////////////////////////////////////////

#include <ppu-memory.h>
#include <ppu.h>
#include <stdint.h>

static uint8_t palette_ram_indexes[ 0x20 ];

static uint8_t universal_bg_color;
static uint8_t bg_palette[ 15 ];
static uint8_t sprite_palette[ 4 ][ 3 ];

void add_new_ppumap( char *name, int type, addr_t ppu_mem_addr, addr_t size, uint8_t *map_to );
void init_palette_memory( struct ppu_mem_map_t *map )
{
    add_new_ppumap( "universal_bg", TYPE_PHYSICAL, 0x3F00, 1, &universal_bg_color );
    add_new_ppumap( "bg_palette", TYPE_PHYSICAL, 0x3F01, 15, bg_palette );
    add_new_ppumap( "bg_mirror_0", TYPE_PHYSICAL, 0x3F10, 1, &universal_bg_color );

    add_new_ppumap( "sprite_palette_0", TYPE_PHYSICAL, 0x3F11, 3, sprite_palette[ 0 ] );
    add_new_ppumap( "bg_mirror_1", TYPE_PHYSICAL, 0x3F14, 1, bg_palette + 3 );
    add_new_ppumap( "sprite_palette_1", TYPE_PHYSICAL, 0x3F15, 3, sprite_palette[ 1 ] );
    add_new_ppumap( "bg_mirror_2", TYPE_PHYSICAL, 0x3F18, 1, bg_palette + 7 );
    add_new_ppumap( "sprite_palette_2", TYPE_PHYSICAL, 0x3F19, 3, sprite_palette[ 2 ] );
    add_new_ppumap( "bg_mirror_3", TYPE_PHYSICAL, 0x3F1C, 1, bg_palette + 11 );
    add_new_ppumap( "sprite_palette_3", TYPE_PHYSICAL, 0x3F1D, 3, sprite_palette[ 3 ] );
}

// clang-format off
static const union sfc_palette_data {
    struct { uint8_t r, g, b, a; };
    uint32_t    data;
} tines_stdpalette[64] = {
    { 0x7F, 0x7F, 0x7F, 0xFF }, { 0x20, 0x00, 0xB0, 0xFF }, { 0x28, 0x00, 0xB8, 0xFF }, { 0x60, 0x10, 0xA0, 0xFF },
    { 0x98, 0x20, 0x78, 0xFF }, { 0xB0, 0x10, 0x30, 0xFF }, { 0xA0, 0x30, 0x00, 0xFF }, { 0x78, 0x40, 0x00, 0xFF },
    { 0x48, 0x58, 0x00, 0xFF }, { 0x38, 0x68, 0x00, 0xFF }, { 0x38, 0x6C, 0x00, 0xFF }, { 0x30, 0x60, 0x40, 0xFF },
    { 0x30, 0x50, 0x80, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF },

    { 0xBC, 0xBC, 0xBC, 0xFF }, { 0x40, 0x60, 0xF8, 0xFF }, { 0x40, 0x40, 0xFF, 0xFF }, { 0x90, 0x40, 0xF0, 0xFF },
    { 0xD8, 0x40, 0xC0, 0xFF }, { 0xD8, 0x40, 0x60, 0xFF }, { 0xE0, 0x50, 0x00, 0xFF }, { 0xC0, 0x70, 0x00, 0xFF },
    { 0x88, 0x88, 0x00, 0xFF }, { 0x50, 0xA0, 0x00, 0xFF }, { 0x48, 0xA8, 0x10, 0xFF }, { 0x48, 0xA0, 0x68, 0xFF },
    { 0x40, 0x90, 0xC0, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF },

    { 0xFF, 0xFF, 0xFF, 0xFF }, { 0x60, 0xA0, 0xFF, 0xFF }, { 0x50, 0x80, 0xFF, 0xFF }, { 0xA0, 0x70, 0xFF, 0xFF },
    { 0xF0, 0x60, 0xFF, 0xFF }, { 0xFF, 0x60, 0xB0, 0xFF }, { 0xFF, 0x78, 0x30, 0xFF }, { 0xFF, 0xA0, 0x00, 0xFF },
    { 0xE8, 0xD0, 0x20, 0xFF }, { 0x98, 0xE8, 0x00, 0xFF }, { 0x70, 0xF0, 0x40, 0xFF }, { 0x70, 0xE0, 0x90, 0xFF },
    { 0x60, 0xD0, 0xE0, 0xFF }, { 0x60, 0x60, 0x60, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF },

    { 0xFF, 0xFF, 0xFF, 0xFF }, { 0x90, 0xD0, 0xFF, 0xFF }, { 0xA0, 0xB8, 0xFF, 0xFF }, { 0xC0, 0xB0, 0xFF, 0xFF },
    { 0xE0, 0xB0, 0xFF, 0xFF }, { 0xFF, 0xB8, 0xE8, 0xFF }, { 0xFF, 0xC8, 0xB8, 0xFF }, { 0xFF, 0xD8, 0xA0, 0xFF },
    { 0xFF, 0xF0, 0x90, 0xFF }, { 0xC8, 0xF0, 0x80, 0xFF }, { 0xA0, 0xF0, 0xA0, 0xFF }, { 0xA0, 0xFF, 0xC8, 0xFF },
    { 0xA0, 0xFF, 0xF0, 0xFF }, { 0xA0, 0xA0, 0xA0, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }, { 0x00, 0x00, 0x00, 0xFF }
};
// clang-format on

uint32_t get_bg_palette_color( uint8_t index )
{
    if ( !index )
        return universal_bg_color;
    if ( index >= 0x10 )
    {
        printf( "ERROR: GET BG COLOR OUT OF BOUND!\n" );
        //        assert( 0 );
    }
    return tines_stdpalette[ bg_palette[ index % 0x10 - 1 ] ].data;
}